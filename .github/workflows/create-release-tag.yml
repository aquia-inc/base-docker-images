name: Create Release Tag

on:
  # only react to changes on the main branch.
  push:
    branches: [main]
  # workflow_dispatch for manual runs.
  workflow_dispatch:
permissions:
  actions: read
  contents: write
  packages: write
  security-events: write

jobs:
  detect_changed_images:
    runs-on: ubuntu-latest
    outputs:
      images_matrix: ${{ steps.build_matrix.outputs.images_to_build }}
      has_changes: ${{ steps.build_matrix.outputs.has_changes }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Detect changed Dockerfiles and build matrix
        id: build_matrix
        run: |
          # get changed Dockerfiles from git diff
          changed_files=$(git diff --name-only ${{ github.event.before }} \
            ${{ github.event.after }} | grep '^Dockerfile\.' | xargs)
          echo "changed_dockerfiles=$changed_files" >> $GITHUB_OUTPUT

          # get image names from Dockerfile extensions
          if [ -n "$changed_files" ]; then
            images=$(for filename in $changed_files; do \
              echo -n "${filename#Dockerfile.} "; done)

            # create JSON array for matrix (e.g., ["nodejs-base", "wolfi-base"])
            image_array=($images)
            output_string="["
            for item in "${image_array[@]}"; do
              output_string+="\"$item\", "
            done
            # Remove trailing comma and space, add closing bracket
            output_string=$(echo "$output_string" | sed 's/, $//')"]"

            echo "images_to_build=$output_string" >> $GITHUB_OUTPUT
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "Found changed images: $images"
          else
            echo "images_to_build=[]" >> $GITHUB_OUTPUT
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "No Dockerfile changes detected"
          fi

      - name: Exit early if no changes
        if: steps.build_matrix.outputs.has_changes != 'true'
        run: |
          echo "No Dockerfile changes detected in this commit, exiting."
          exit 0

  create_release_tags:
    needs: detect_changed_images
    if: needs.detect_changed_images.outputs.has_changes == 'true'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        image_name: ${{ fromJSON(needs.detect_changed_images.outputs.images_matrix) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          ssh-key: "${{ secrets.DEPLOY_KEY }}"
          fetch-depth: 0

      - name: Display processing image
        run: |
          echo "Processing image: ${{ matrix.image_name }}"

      - name: Find latest tag for image
        id: latest_tag
        run: |
          echo "Looking for existing tags for ${{ matrix.image_name }}..."
          latest=$(git for-each-ref --sort='-v:refname' \
            --format '%(refname:short)' \
            refs/tags/release/${{ matrix.image_name }} | head -n 1)

          if [ -n "$latest" ]; then
            # Extract semver from tag (remove 'v' prefix)
            semver=$(echo "$latest" | grep -oP 'v\d+\.\d+\.\d+' | sed 's/v//')
            echo "Found latest tag: $latest (version: $semver)"
          else
            semver="0.0.0"
            echo "No existing tags found, starting from $semver"
          fi

          echo "current_semver=$semver" >> $GITHUB_OUTPUT

      - name: Calculate next version
        id: next_version
        uses: "WyriHaximus/github-action-next-semvers@v1"
        with:
          version: ${{ steps.latest_tag.outputs.current_semver }}

      - name: Display version information
        run: |
          echo "Current version: ${{ steps.latest_tag.outputs.current_semver }}"
          echo "Next patch version: ${{ steps.next_version.outputs.patch }}"
          echo "Next minor version: ${{ steps.next_version.outputs.minor }}"
          echo "Next major version: ${{ steps.next_version.outputs.major }}"

      - name: Create and push release tag
        if: github.event.ref == 'refs/heads/main'
        run: |
          # Configure git for bot user
          git config user.email "aquia-base-images-bot@users.noreply.github.com"
          git config user.name "Aquia Base Images Bot"

          # Create new tag with next patch version
          new_tag="release/${{ matrix.image_name }}/v${{ steps.next_version.outputs.patch }}"
          tag_message="Release ${{ matrix.image_name }}/v${{ steps.next_version.outputs.patch }}"

          echo "Creating tag: $new_tag"
          echo "Tag message: $tag_message"

          git tag -a "$new_tag" -m "$tag_message"
          git push origin "$new_tag"

          echo "âœ… Successfully created and pushed tag: $new_tag"
