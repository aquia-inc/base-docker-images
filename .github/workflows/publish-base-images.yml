# .github/workflows/publish-base-images.yml
name: Publish Base Docker images

on:
  push:
    tags:
      - "release/**"
    branches:
      - main
  pull_request:
    branches: [ main ]
env:
  REGISTRY: ghcr.io
  # Use a default tag for PRs to allow parsing logic to run without error
  # For other events (main push, tag push), use the actual ref
  TAG: ${{ (github.event_name == 'pull_request' && 'release/python-base/v0.0.0-pr') || github.ref }}

jobs:
  publish_image:
    runs-on: ubuntu-latest
    env: # Add GH_TOKEN at the job level
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    strategy:
      fail-fast: false
      matrix:
        platform: [linux/amd64, linux/arm64]
    permissions:
      contents: write
      packages: write
      security-events: write
      actions: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Trivy - configure cache
        id: cache-trivy-db
        uses: actions/cache@v4
        with:
          path: ~/.cache/trivy
          key: ${{ runner.os }}-trivy-db-${{ matrix.platform }}
          restore-keys: |
            ${{ runner.os }}-trivy-db-${{ matrix.platform }}
            ${{ runner.os }}-trivy-db-

      - name: Sanitize platform name for tag/name suffix
        id: sanitize_platform
        run: echo "suffix=$(echo ${{ matrix.platform }} | tr '/' '-')" >> $GITHUB_OUTPUT

      - name: Extract Image Base Name and Version from Tag
        id: parse_tag
        run: |
          # Regex updated to capture optional build metadata (like +rebuild.timestamp)
          # Format: release/<image-name>/v<version>[-prerelease][+buildmetadata]
          # Example: release/python-base/v1.2.3+rebuild.20231027100000
          regex='release/([^/]+)/v(\d+\.\d+\.\d+(-[a-zA-Z0-9.-]+)?(\+[a-zA-Z0-9.-]+)?)'
          tag_to_parse="${{ env.TAG }}"

          echo "Input TAG: $tag_to_parse"
          # Use grep -oP and sed to extract the relevant part first
          match=$(echo "$tag_to_parse" | grep -oP "$regex" | sed 's|release/||')
          echo "Regex match result on relevant part: $match"

          if [[ $match =~ ^([^/]+)/v(.+)$ ]]; then
              echo "Match found (Release Tag format)"
              image_base_name="${BASH_REMATCH[1]}"
              # Version now includes potential pre-release AND build metadata
              version="${BASH_REMATCH[2]}"
              # Extract version *without* build metadata for potential use elsewhere if needed
              version_no_build=$(echo "$version" | sed 's/\+.*//')
              echo "image_base_name=$image_base_name" >> $GITHUB_OUTPUT
              echo "version=$version" >> $GITHUB_OUTPUT # Full version with build metadata
              echo "version_no_build=$version_no_build" >> $GITHUB_OUTPUT # Version without build metadata
              echo "Parsed: image_base_name=$image_base_name, version=$version, version_no_build=$version_no_build"
          else
              # Not a release tag - likely main branch push or PR default
              echo "Not a release tag build (TAG='$tag_to_parse'). Setting default values for test build."
              default_image="python-base"
              default_version="dev" # Use 'dev' for non-release builds
              echo "image_base_name=$default_image" >> $GITHUB_OUTPUT
              echo "version=$default_version" >> $GITHUB_OUTPUT
              echo "version_no_build=$default_version" >> $GITHUB_OUTPUT
              echo "Using defaults: image_base_name=$default_image, version=$default_version"
          fi


      - name: Construct Platform-Specific Image Name
        id: image_name
        run: |
          platform_image_name="${{ steps.parse_tag.outputs.image_base_name }}-${{ steps.sanitize_platform.outputs.suffix }}"
          echo "platform_image_name=${platform_image_name}" >> $GITHUB_OUTPUT
          echo "Platform Image Name: ${platform_image_name}"

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.4.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # --- FIX: ADD QEMU SETUP ---
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      # --- END FIX ---

      - name: Build Docker Image for ${{ matrix.platform }} (Test)
        id: build_test
        uses: docker/build-push-action@v6
        with:
          pull: true
          file: Dockerfile.${{ steps.parse_tag.outputs.image_base_name }}
          platforms: ${{ matrix.platform }}
          load: true
          tags: ${{ github.repository }}/${{ steps.image_name.outputs.platform_image_name }}:test
          cache-from: type=gha,scope=${{ github.repository }}-${{ steps.image_name.outputs.platform_image_name }}
          cache-to: type=gha,mode=max,scope=${{ github.repository }}-${{ steps.image_name.outputs.platform_image_name }}

      - name: Run Trivy vulnerability scanner for ${{ matrix.platform }}
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: image
          image-ref: ${{ github.repository }}/${{ steps.image_name.outputs.platform_image_name }}:test
          format: table
          # output: "trivy-results-${{ steps.sanitize_platform.outputs.suffix }}.sarif"
          exit-code: "1"
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "CRITICAL,HIGH,MEDIUM"

      - name: Get installed package versions for ${{ matrix.platform }}
        id: get_versions
        run: |
            image_base_name="${{ steps.parse_tag.outputs.image_base_name }}"
            platform_image_name="${{ steps.image_name.outputs.platform_image_name }}"
            test_tag="${{ github.repository }}/${platform_image_name}:test"
            output_file="env.versions.${{ steps.sanitize_platform.outputs.suffix }}"
            echo "Output file: $output_file"
            echo "Test tag: $test_tag"
            extraction_status="false"

            if [[ "$image_base_name" == "python-base" || "$image_base_name" == "nodejs-base" || "$image_base_name" == "openjdk17-base" ]]; then
                echo "Attempting to extract versions from $test_tag for $platform_image_name"
                # This command should now work because QEMU is set up
                if docker run --rm --platform ${{ matrix.platform }} "$test_tag" sh -c 'cat /tmp/versions.txt && exit 0 || exit 1' > "$output_file"; then
                    if [ -s "$output_file" ]; then
                        echo "Versions extracted successfully to $output_file"
                        extraction_status="true"
                    else
                        echo "Warning: Command succeeded but extracted versions file '$output_file' is empty. Treating as failure."
                        rm -f "$output_file"
                    fi
                else
                    echo "Warning: Failed to execute 'cat /tmp/versions.txt' in container $test_tag. Exit code: $?"
                    rm -f "$output_file"
                fi
            else
                echo "No version extraction needed for $platform_image_name."
            fi

            echo "extraction_success=$extraction_status" >> $GITHUB_OUTPUT
            if [[ "$extraction_status" == "true" ]]; then
              echo "output_file_path=$output_file" >> $GITHUB_OUTPUT
            else
              echo "output_file_path=" >> $GITHUB_OUTPUT
            fi

      - name: Upload versions artifact for ${{ matrix.platform }}
        uses: actions/upload-artifact@v4
        if: steps.get_versions.outputs.extraction_success == 'true' && github.event_name == 'push' && github.ref_type == 'tag'
        with:
          name: versions-file-${{ steps.sanitize_platform.outputs.suffix }}
          path: ${{ steps.get_versions.outputs.output_file_path }}
          retention-days: 1
          if-no-files-found: error

      - name: Check if env.versions file exists (Local check)
        id: check_env_file
        if: steps.get_versions.outputs.extraction_success == 'true'
        run: |
          if [ -f "env.versions.${{ steps.sanitize_platform.outputs.suffix }}" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Does not exist"
          fi

      - name: Rename versions file to .env (Local Env)
        if: steps.check_env_file.outputs.exists == 'true'
        run: mv env.versions.${{ steps.sanitize_platform.outputs.suffix }} .env

      - name: Read package versions for ${{ matrix.platform }} (Local Env)
        if: steps.check_env_file.outputs.exists == 'true'
        id: dotenv_local
        uses: xom9ikk/dotenv@v2.3.0
        with:
          path: .

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5.7.0
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ steps.image_name.outputs.platform_image_name }}
          tags: |
            # Standard tags: version, latest, dev-<sha>
            type=semver,pattern={{version}},value=${{ steps.parse_tag.outputs.version }},enable=${{ github.event_name == 'push' && github.ref_type == 'tag' }}
            type=raw,value=latest,enable=${{ github.event_name == 'push' && github.ref_type == 'tag' }}
            type=raw,value=dev-${{ github.sha }},enable=${{ github.event_name != 'push' || github.ref_type != 'tag' }}

            # Python Major/Minor tags
            type=raw,value={{env.python_major_tag}},enable=${{ steps.parse_tag.outputs.image_base_name == 'python-base' && env.python_major_tag != '' && github.event_name == 'push' && github.ref_type == 'tag' }}
            type=raw,value={{env.python_minor_tag}},enable=${{ steps.parse_tag.outputs.image_base_name == 'python-base' && env.python_minor_tag != '' && github.event_name == 'push' && github.ref_type == 'tag' }}

            # Node.js Major/Minor tags
            type=raw,value={{env.nodejs_major_tag}},enable=${{ steps.parse_tag.outputs.image_base_name == 'nodejs-base' && env.nodejs_major_tag != '' && github.event_name == 'push' && github.ref_type == 'tag' }}
            type=raw,value={{env.nodejs_minor_tag}},enable=${{ steps.parse_tag.outputs.image_base_name == 'nodejs-base' && env.nodejs_minor_tag != '' && github.event_name == 'push' && github.ref_type == 'tag' }}

            # OpenJDK Major/Minor tags
            type=raw,value={{env.java_major_tag}},enable=${{ steps.parse_tag.outputs.image_base_name == 'openjdk17-base' && env.java_major_tag != '' && github.event_name == 'push' && github.ref_type == 'tag' }}
            type=raw,value={{env.java_minor_tag}},enable=${{ steps.parse_tag.outputs.image_base_name == 'openjdk17-base' && env.java_minor_tag != '' && github.event_name == 'push' && github.ref_type == 'tag' }}
          labels: |
            org.opencontainers.image.title=${{ steps.image_name.outputs.platform_image_name }} (${{ matrix.platform }})
            org.opencontainers.image.description=Base image for ${{ steps.parse_tag.outputs.image_base_name }} targeting ${{ matrix.platform }}
            org.opencontainers.image.vendor=Aquia Inc
            org.opencontainers.image.build-url=${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            # --- Add language version labels if available ---
            # Python
            python.version.major=${{ env.python_major_tag }}
            python.version.minor=${{ env.python_minor_tag }}
            python.version.full=${{ env.python }}
            # Node.js
            nodejs.version.major=${{ env.nodejs_major_tag }}
            nodejs.version.minor=${{ env.nodejs_minor_tag }}
            nodejs.version.full=${{ env.nodejs }}
            # Java (OpenJDK)
            java.version.major=${{ env.java_major_tag }}
            java.version.minor=${{ env.java_minor_tag }}
            java.version.full=${{ env.java }}
            org.opencontainers.image.architecture=${{ matrix.platform }}

      - name: Build and push Docker image for ${{ matrix.platform }}
        id: docker_build
        uses: docker/build-push-action@v6
        if: github.event_name == 'push' && github.ref_type == 'tag'
        with:
          pull: true
          file: Dockerfile.${{ steps.parse_tag.outputs.image_base_name }}
          push: true
          platforms: ${{ matrix.platform }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ github.repository }}-${{ steps.image_name.outputs.platform_image_name }}
          cache-to: type=gha,mode=max,scope=${{ github.repository }}-${{ steps.image_name.outputs.platform_image_name }}

      - name: Output SHA256 digest for ${{ matrix.platform }}
        if: github.event_name == 'push' && github.ref_type == 'tag'
        run: |
          echo "SHA256 digest for ${{ steps.image_name.outputs.platform_image_name }}: ${{ steps.docker_build.outputs.digest }}"
          ls -al

      - name: Determine Repository Owner Type for ${{ matrix.platform }}
        id: owner_type
        if: steps.docker_build.outputs.digest != '' && github.event_name == 'push' && github.ref_type == 'tag'
        env:
          OWNER_LOGIN: ${{ github.repository_owner }} 
          # GH_TOKEN is inherited from the job-level env
        run: |
          echo "Determining owner type for $OWNER_LOGIN"
          OWNER_TYPE_JSON=$(gh api "users/$OWNER_LOGIN" --jq '.type')
          # Remove quotes from JSON string output by jq
          OWNER_TYPE=$(echo "$OWNER_TYPE_JSON" | tr -d '"')

          echo "Raw type from API: '$OWNER_TYPE_JSON', Parsed type: '$OWNER_TYPE'"

          if [ "$OWNER_TYPE" = "User" ]; then
            echo "api_path_segment=users" >> $GITHUB_OUTPUT
            echo "Determined owner type for $OWNER_LOGIN: User"
          elif [ "$OWNER_TYPE" = "Organization" ]; then
            echo "api_path_segment=orgs" >> $GITHUB_OUTPUT
            echo "Determined owner type for $OWNER_LOGIN: Organization"
          else
            echo "::error::Could not determine owner type for '$OWNER_LOGIN'. Received type: '$OWNER_TYPE'."
            echo "Full API response for users/$OWNER_LOGIN:"
            gh api "users/$OWNER_LOGIN"
            exit 1
          fi

      - name: Make Package Public on GHCR for ${{ matrix.platform }}
        if: steps.docker_build.outputs.digest != '' && steps.owner_type.outputs.api_path_segment != '' && github.event_name == 'push' && github.ref_type == 'tag'
        env:
          PACKAGE_NAME: ${{ steps.image_name.outputs.platform_image_name }}
          OWNER: ${{ github.repository_owner }}
          API_PATH_SEGMENT: ${{ steps.owner_type.outputs.api_path_segment }}
          # GH_TOKEN is now inherited from the job-level env
        run: |
          echo "Attempting to set package visibility to public for $PACKAGE_NAME (owner: $OWNER, type path: $API_PATH_SEGMENT)"
          API_URL_PATH="/${API_PATH_SEGMENT}/${OWNER}/packages/container/${PACKAGE_NAME}"
          echo "Target API path: $API_URL_PATH"

          if gh api \
            --method PATCH \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "$API_URL_PATH" \
            -f visibility='public' \
            --silent; then
            echo "Successfully set package $PACKAGE_NAME to public."
          else
            ERROR_CODE=$?
            # Check if it's already public or if the package doesn't exist yet (race condition)
            CURRENT_VISIBILITY=$(gh api "$API_URL_PATH" --jq .visibility --silent 2>/dev/null | tr -d '"')
            if [ "$CURRENT_VISIBILITY" = "public" ]; then
              echo "Package $PACKAGE_NAME is already public. No action needed."
            else
              echo "::error::Failed to set package $PACKAGE_NAME to public (gh api exit code $ERROR_CODE). Current visibility: '$CURRENT_VISIBILITY'."
              echo "Full package details for diagnostics (if package exists):"
              gh api "$API_URL_PATH" --silent || echo "::error::Fetching package details also failed or package does not exist yet."
              # exit 1 
            fi
          fi

  create_release:
    runs-on: ubuntu-latest
    needs: publish_image
    if: github.event_name == 'push' && github.ref_type == 'tag' && needs.publish_image.result == 'success'
    permissions:
      contents: write
      actions: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract Image Base Name and Version from Tag for Release
        id: parse_tag_release
        run: |
          tag_ref="${{ github.ref }}"
          # Updated regex to handle optional build metadata in the tag being parsed for release info
          if [[ $tag_ref =~ refs/tags/release/([^/]+)/v([0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?(\+[a-zA-Z0-9.-]+)?)$ ]]; then
              image_base_name="${BASH_REMATCH[1]}"
              version="${BASH_REMATCH[2]}" # This includes potential pre-release and build metadata
              echo "Parsed from release tag: image_base_name=$image_base_name, version=$version"
              echo "image_base_name=$image_base_name" >> $GITHUB_OUTPUT
              echo "version=$version" >> $GITHUB_OUTPUT
          else
              echo "Error: Could not parse release tag format from ref: $tag_ref"
              echo "Expected format: refs/tags/release/<image-name>/vX.Y.Z[-prerelease][+buildmetadata]"
              exit 1
          fi

      - name: Download AMD64 versions artifact
        id: download_artifact_amd64
        if: |
          steps.parse_tag_release.outputs.image_base_name == 'python-base' ||
          steps.parse_tag_release.outputs.image_base_name == 'nodejs-base' ||
          steps.parse_tag_release.outputs.image_base_name == 'openjdk17-base'
        uses: actions/download-artifact@v4
        with:
          name: versions-file-linux-amd64
          path: .

      - name: Download ARM64 versions artifact
        id: download_artifact_arm64
        if: |
          steps.parse_tag_release.outputs.image_base_name == 'python-base' ||
          steps.parse_tag_release.outputs.image_base_name == 'nodejs-base' ||
          steps.parse_tag_release.outputs.image_base_name == 'openjdk17-base'
        uses: actions/download-artifact@v4
        with:
          name: versions-file-linux-arm64
          path: .

      - name: Create GitHub Release Body
        id: release_body
        run: |
          image_base_name="${{ steps.parse_tag_release.outputs.image_base_name }}"
          version_tag="${{ steps.parse_tag_release.outputs.version }}" # Use full version from tag
          repo_name="${{ github.repository }}"
          registry="${{ env.REGISTRY }}"

          # Function to extract value from a versions file
          get_version_value() {
            local file="$1"
            local key="$2"
            if [ -f "$file" ]; then
              grep "^${key}=" "$file" | cut -d'=' -f2
            fi
          }

          # Initialize version variables
          py_major_amd64="" py_minor_amd64="" py_full_amd64=""
          py_major_arm64="" py_minor_arm64="" py_full_arm64=""
          node_major_amd64="" node_minor_amd64="" node_full_amd64=""
          node_major_arm64="" node_minor_arm64="" node_full_arm64=""
          jdk_major_amd64="" jdk_minor_amd64="" jdk_full_amd64=""
          jdk_major_arm64="" jdk_minor_arm64="" jdk_full_arm64=""

          # Read versions if files exist
          if [[ "${{ steps.download_artifact_amd64.outcome }}" == "success" ]]; then
              echo "Reading AMD64 versions file..."
              py_major_amd64=$(get_version_value "env.versions.linux-amd64" "python_major_tag")
              py_minor_amd64=$(get_version_value "env.versions.linux-amd64" "python_minor_tag")
              py_full_amd64=$(get_version_value "env.versions.linux-amd64" "python")
              node_major_amd64=$(get_version_value "env.versions.linux-amd64" "nodejs_major_tag")
              node_minor_amd64=$(get_version_value "env.versions.linux-amd64" "nodejs_minor_tag")
              node_full_amd64=$(get_version_value "env.versions.linux-amd64" "nodejs")
              # Corrected keys for openjdk
              jdk_major_amd64=$(get_version_value "env.versions.linux-amd64" "java_major_tag")
              jdk_minor_amd64=$(get_version_value "env.versions.linux-amd64" "java_minor_tag")
              jdk_full_amd64=$(get_version_value "env.versions.linux-amd64" "java")
          else
              echo "AMD64 versions artifact not downloaded or download failed."
          fi

          if [[ "${{ steps.download_artifact_arm64.outcome }}" == "success" ]]; then
              echo "Reading ARM64 versions file..."
              py_major_arm64=$(get_version_value "env.versions.linux-arm64" "python_major_tag")
              py_minor_arm64=$(get_version_value "env.versions.linux-arm64" "python_minor_tag")
              py_full_arm64=$(get_version_value "env.versions.linux-arm64" "python")
              node_major_arm64=$(get_version_value "env.versions.linux-arm64" "nodejs_major_tag")
              node_minor_arm64=$(get_version_value "env.versions.linux-arm64" "nodejs_minor_tag")
              node_full_arm64=$(get_version_value "env.versions.linux-arm64" "nodejs")
              # Corrected keys for openjdk
              jdk_major_arm64=$(get_version_value "env.versions.linux-arm64" "java_major_tag")
              jdk_minor_arm64=$(get_version_value "env.versions.linux-arm64" "java_minor_tag")
              jdk_full_arm64=$(get_version_value "env.versions.linux-arm64" "java")
          else
              echo "ARM64 versions artifact not downloaded or download failed."
          fi

          # Start with the base body
          body=$(cat <<EOF
          Platform-specific Docker images for \`$image_base_name\` version \`$version_tag\` pushed.

          The \`latest\` tag for each platform now points to this release. Major and Minor version tags (e.g., \`3\`, \`3.12\`) are recommended to always pick up the latest version of spefcific language base images.

          **Published Images & Tags:**

          *   **linux/amd64:**
              *   Image: \`$registry/$repo_name/$image_base_name-linux-amd64\`
              *   Tag: \`$version_tag\`
              *   Tag: \`latest\`
              $( [ -n "$py_major_amd64" ] && printf "*   Tag: \`%s\`\n" "$py_major_amd64" || true ) \
              $( [ -n "$py_minor_amd64" ] && printf "*   Tag: \`%s\`\n" "$py_minor_amd64" || true ) \
              $( [ -n "$node_major_amd64" ] && printf "*   Tag: \`%s\`\n" "$node_major_amd64" || true ) \
              $( [ -n "$node_minor_amd64" ] && printf "*   Tag: \`%s\`\n" "$node_minor_amd64" || true ) \
              $( [ -n "$jdk_major_amd64" ] && printf "*   Tag: \`%s\`\n" "$jdk_major_amd64" || true ) \
              $( [ -n "$jdk_minor_amd64" ] && printf "*   Tag: \`%s\`\n" "$jdk_minor_amd64" || true )
          *   **linux/arm64:**
              *   Image: \`$registry/$repo_name/$image_base_name-linux-arm64\`
              *   Tag: \`$version_tag\`
              *   Tag: \`latest\`
              $( [ -n "$py_major_arm64" ] && printf "*   Tag: \`%s\`\n" "$py_major_arm64" || true ) \
              $( [ -n "$py_minor_arm64" ] && printf "*   Tag: \`%s\`\n" "$py_minor_arm64" || true ) \
              $( [ -n "$node_major_arm64" ] && printf "*   Tag: \`%s\`\n" "$node_major_arm64" || true ) \
              $( [ -n "$node_minor_arm64" ] && printf "*   Tag: \`%s\`\n" "$node_minor_arm64" || true ) \
              $( [ -n "$jdk_major_arm64" ] && printf "*   Tag: \`%s\`\n" "$jdk_major_arm64" || true ) \
              $( [ -n "$jdk_minor_arm64" ] && printf "*   Tag: \`%s\`\n" "$jdk_minor_arm64" || true )
          EOF
          )

          # Conditionally add specific version tags section
          specific_tags_section=""
          if [[ "$image_base_name" == "python-base" ]]; then
            if [ -n "$py_major_amd64" ] || [ -n "$py_major_arm64" ]; then
              specific_tags_section=$(cat <<EOF

          **Python Version Tags:**
          *   AMD64: Major=\`${py_major_amd64:-N/A}\`, Minor=\`${py_minor_amd64:-N/A}\`, Full=\`${py_full_amd64:-N/A}\`
          *   ARM64: Major=\`${py_major_arm64:-N/A}\`, Minor=\`${py_minor_arm64:-N/A}\`, Full=\`${py_full_arm64:-N/A}\`
          EOF
              )
            fi
          elif [[ "$image_base_name" == "nodejs-base" ]]; then
            if [ -n "$node_major_amd64" ] || [ -n "$node_major_arm64" ]; then
              specific_tags_section=$(cat <<EOF

          **Node.js Version Tags:**
          *   AMD64: Major=\`${node_major_amd64:-N/A}\`, Minor=\`${node_minor_amd64:-N/A}\`, Full=\`${node_full_amd64:-N/A}\`
          *   ARM64: Major=\`${node_major_arm64:-N/A}\`, Minor=\`${node_minor_arm64:-N/A}\`, Full=\`${node_full_arm64:-N/A}\`
          EOF
              )
            fi
          elif [[ "$image_base_name" == "openjdk17-base" ]]; then
            if [ -n "$jdk_major_amd64" ] || [ -n "$jdk_major_arm64" ]; then
              specific_tags_section=$(cat <<EOF

          **OpenJDK Version Tags:**
          *   AMD64: Major=\`${jdk_major_amd64:-N/A}\`, Minor=\`${jdk_minor_amd64:-N/A}\`, Full=\`${jdk_full_amd64:-N/A}\`
          *   ARM64: Major=\`${jdk_major_arm64:-N/A}\`, Minor=\`${jdk_minor_arm64:-N/A}\`, Full=\`${jdk_full_arm64:-N/A}\`
          EOF
              )
            fi
          fi

          # Append the specific tags section if it was generated
          if [ -n "$specific_tags_section" ]; then
            body="${body}${specific_tags_section}"
          else
            echo "No specific version tags found or extracted for $image_base_name."
          fi

          pull_examples=$(cat <<EOF


          **Pull Examples:**

          *   **AMD64 / x86_64 (Version Specific):**
              \`\`\`bash
              docker pull $registry/$repo_name/${image_base_name}-linux-amd64:$version_tag
              \`\`\`
          *   **AMD64 / x86_64 (Latest):**
              \`\`\`bash
              docker pull $registry/$repo_name/${image_base_name}-linux-amd64:latest
              \`\`\`

          EOF
          )

          # Add AMD64 Major/Minor pull examples if versions exist
          if [[ "$image_base_name" == "python-base" ]]; then
              if [ -n "$py_major_amd64" ]; then pull_examples+=$(printf '\n*   **AMD64 / x86_64 (Major - \`%s\`):**\n    \`\`\`bash\n    docker pull %s/%s/%s-linux-amd64:%s\n    \`\`\`\n' "$py_major_amd64" "$registry" "$repo_name" "$image_base_name" "$py_major_amd64"); fi
              if [ -n "$py_minor_amd64" ]; then pull_examples+=$(printf '\n*   **AMD64 / x86_64 (Minor - \`%s\`):**\n    \`\`\`bash\n    docker pull %s/%s/%s-linux-amd64:%s\n    \`\`\`\n\n' "$py_minor_amd64" "$registry" "$repo_name" "$image_base_name" "$py_minor_amd64"); fi
          elif [[ "$image_base_name" == "nodejs-base" ]]; then
              if [ -n "$node_major_amd64" ]; then pull_examples+=$(printf '\n*   **AMD64 / x86_64 (Major - \`%s\`):**\n    \`\`\`bash\n    docker pull %s/%s/%s-linux-amd64:%s\n    \`\`\`\n' "$node_major_amd64" "$registry" "$repo_name" "$image_base_name" "$node_major_amd64"); fi
              if [ -n "$node_minor_amd64" ]; then pull_examples+=$(printf '\n*   **AMD64 / x86_64 (Minor - \`%s\`):**\n    \`\`\`bash\n    docker pull %s/%s/%s-linux-amd64:%s\n    \`\`\`\n\n' "$node_minor_amd64" "$registry" "$repo_name" "$image_base_name" "$node_minor_amd64"); fi
          elif [[ "$image_base_name" == "openjdk17-base" ]]; then
              if [ -n "$jdk_major_amd64" ]; then pull_examples+=$(printf '\n*   **AMD64 / x86_64 (Major - \`%s\`):**\n    \`\`\`bash\n    docker pull %s/%s/%s-linux-amd64:%s\n    \`\`\`\n' "$jdk_major_amd64" "$registry" "$repo_name" "$image_base_name" "$jdk_major_amd64"); fi
              if [ -n "$jdk_minor_amd64" ]; then pull_examples+=$(printf '\n*   **AMD64 / x86_64 (Minor - \`%s\`):**\n    \`\`\`bash\n    docker pull %s/%s/%s-linux-amd64:%s\n    \`\`\`\n\n' "$jdk_minor_amd64" "$registry" "$repo_name" "$image_base_name" "$jdk_minor_amd64"); fi
          fi

          # Add base ARM64 pull examples
          pull_examples+=$(cat <<EOF

          *   **ARM64 / aarch64 (Version Specific):**
              \`\`\`bash
              docker pull $registry/$repo_name/${image_base_name}-linux-arm64:$version_tag
              \`\`\`
          *   **ARM64 / aarch64 (Latest):**
              \`\`\`bash
              docker pull $registry/$repo_name/${image_base_name}-linux-arm64:latest
              \`\`\`

          EOF
          )

          # Add ARM64 Major/Minor pull examples if versions exist
          if [[ "$image_base_name" == "python-base" ]]; then
              if [ -n "$py_major_arm64" ]; then pull_examples+=$(printf '\n*   **ARM64 / aarch64 (Major - \`%s\`):**\n    \`\`\`bash\n    docker pull %s/%s/%s-linux-arm64:%s\n    \`\`\`\n' "$py_major_arm64" "$registry" "$repo_name" "$image_base_name" "$py_major_arm64"); fi
              if [ -n "$py_minor_arm64" ]; then pull_examples+=$(printf '\n*   **ARM64 / aarch64 (Minor - \`%s\`):**\n    \`\`\`bash\n    docker pull %s/%s/%s-linux-arm64:%s\n    \`\`\`\n\n' "$py_minor_arm64" "$registry" "$repo_name" "$image_base_name" "$py_minor_arm64"); fi
          elif [[ "$image_base_name" == "nodejs-base" ]]; then
              if [ -n "$node_major_arm64" ]; then pull_examples+=$(printf '\n*   **ARM64 / aarch64 (Major - \`%s\`):**\n    \`\`\`bash\n    docker pull %s/%s/%s-linux-arm64:%s\n    \`\`\`\n' "$node_major_arm64" "$registry" "$repo_name" "$image_base_name" "$node_major_arm64"); fi
              if [ -n "$node_minor_arm64" ]; then pull_examples+=$(printf '\n*   **ARM64 / aarch64 (Minor - \`%s\`):**\n    \`\`\`bash\n    docker pull %s/%s/%s-linux-arm64:%s\n    \`\`\`\n\n' "$node_minor_arm64" "$registry" "$repo_name" "$image_base_name" "$node_minor_arm64"); fi
          elif [[ "$image_base_name" == "openjdk17-base" ]]; then
              if [ -n "$jdk_major_arm64" ]; then pull_examples+=$(printf '\n*   **ARM64 / aarch64 (Major - \`%s\`):**\n    \`\`\`bash\n    docker pull %s/%s/%s-linux-arm64:%s\n    \`\`\`\n' "$jdk_major_arm64" "$registry" "$repo_name" "$image_base_name" "$jdk_major_arm64"); fi
              if [ -n "$jdk_minor_arm64" ]; then pull_examples+=$(printf '\n*   **ARM64 / aarch64 (Minor - \`%s\`):**\n    \`\`\`bash\n    docker pull %s/%s/%s-linux-arm64:%s\n    \`\`\`\n\n' "$jdk_minor_arm64" "$registry" "$repo_name" "$image_base_name" "$jdk_minor_arm64"); fi
          fi

          # Append pull examples to the main body
          body="${body}${pull_examples}"

          echo "Setting BODY_TEXT environment variable..."
          echo "BODY_TEXT<<EOF" >> $GITHUB_ENV
          echo "$body" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: "Release ${{ steps.parse_tag_release.outputs.image_base_name }} v${{ steps.parse_tag_release.outputs.version }}"
          body: ${{ env.BODY_TEXT }}
          draft: false
          prerelease: ${{ contains(steps.parse_tag_release.outputs.version, '-') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
