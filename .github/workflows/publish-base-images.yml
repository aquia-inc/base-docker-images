name: Publish Base Docker images

on:
  push:
    tags:
      - "release/**"
    branches:
      - main
  pull_request:
    branches: [ main ]
env:
  REGISTRY: ghcr.io
  TAG: ${{ (github.event_name == 'pull_request' && 'release/python-base/v0.0.0') || github.ref }}

jobs:
  publish_image:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform: [linux/amd64, linux/arm64]
    permissions:
      contents: write
      packages: write
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Trivy - configure cache
        id: cache-trivy-db
        uses: actions/cache@v4
        with:
          path: ~/.cache/trivy
          key: ${{ runner.os }}-trivy-db-${{ matrix.platform }}
          restore-keys: |
            ${{ runner.os }}-trivy-db-${{ matrix.platform }}
            ${{ runner.os }}-trivy-db-

      - name: Sanitize platform name for tag/name suffix
        id: sanitize_platform
        run: echo "suffix=$(echo ${{ matrix.platform }} | tr '/' '-')" >> $GITHUB_OUTPUT

      - name: Extract Image Base Name and Version from Tag
        id: parse_tag
        run: |
          match=$(echo ${{ env.TAG }} | grep -oP 'release/([^/]+)/v(\d+\.\d+\.\d+)$' | sed 's/release\///')
          echo "match=$match"
          if [[ $match =~ ^([^/]+)/v(.+)$ ]]; then
              echo "Match found"
              image_base_name="${BASH_REMATCH[1]}"
              version="${BASH_REMATCH[2]}"
              echo "image_base_name=$image_base_name" >> $GITHUB_OUTPUT
              echo "version=$version" >> $GITHUB_OUTPUT
              echo "image_base_name=$image_base_name"
              echo "version=$version"
          else
              echo "Image base name and version could not be parsed from TAG='${{ env.TAG }}'"
              exit 1
          fi

      - name: Construct Platform-Specific Image Name
        id: image_name
        run: |
          echo "platform_image_name=${{ steps.parse_tag.outputs.image_base_name }}-${{ steps.sanitize_platform.outputs.suffix }}" >> $GITHUB_OUTPUT
          echo "Platform Image Name: ${{ steps.parse_tag.outputs.image_base_name }}-${{ steps.sanitize_platform.outputs.suffix }}"

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.4.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker Image for ${{ matrix.platform }} (Test)
        id: build_test
        uses: docker/build-push-action@v6
        with:
          pull: true
          file: Dockerfile.${{ steps.parse_tag.outputs.image_base_name }}
          platforms: ${{ matrix.platform }}
          load: true
          tags: ${{ github.repository }}/${{ steps.image_name.outputs.platform_image_name }}:test
          cache-from: type=gha,scope=${{ github.repository }}-${{ steps.image_name.outputs.platform_image_name }}
          cache-to: type=gha,mode=max,scope=${{ github.repository }}-${{ steps.image_name.outputs.platform_image_name }}

      - name: Run Trivy vulnerability scanner for ${{ matrix.platform }}
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: image
          image-ref: ${{ github.repository }}/${{ steps.image_name.outputs.platform_image_name }}:test
          format: "sarif"
          output: "trivy-results-${{ steps.sanitize_platform.outputs.suffix }}.sarif"
          exit-code: "1"
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "CRITICAL,HIGH,MEDIUM"

      - name: Get installed package versions for ${{ matrix.platform }}
        run: |
          image_base_name="${{ steps.parse_tag.outputs.image_base_name }}"
          platform_image_name="${{ steps.image_name.outputs.platform_image_name }}"
          test_tag="${{ github.repository }}/${platform_image_name}:test"
          output_file=".env.versions.${{ steps.sanitize_platform.outputs.suffix }}"
          echo "Output file: $output_file"
          echo "Test tag: $test_tag"

          if [[ $image_base_name == 'python-base' || $image_base_name == 'nodejs-base' || $image_base_name == 'openjdk17-base' ]]; then
              echo "Extracting versions from $test_tag for $platform_image_name"
              if docker run --rm --platform ${{ matrix.platform }} "$test_tag" cat /tmp/versions.txt > "$output_file"; then
                echo "Versions extracted to $output_file"
              else
                echo "Warning: Failed to extract versions from $test_tag. Creating empty file."
                touch "$output_file"
              fi
          else
              echo "No version extraction needed for $platform_image_name. Creating empty file."
              touch "$output_file"
          fi

      - name: Check if .env.versions file exists
        id: check_env_file
        run: |
          if [ -f ".env.versions.${{ steps.sanitize_platform.outputs.suffix }}" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Read package versions for ${{ matrix.platform }}
        if: steps.check_env_file.outputs.exists == 'true'
        id: dotenv
        uses: xom9ikk/dotenv@v2.3.0
        with:
          mode: versions
          path: ".env.versions.${{ steps.sanitize_platform.outputs.suffix }}"

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5.7.0
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ steps.image_name.outputs.platform_image_name }}
          tags: |
            type=semver,pattern={{version}},value=${{ steps.parse_tag.outputs.version }},enable=${{ github.event_name == 'push' && github.ref_type == 'tag' }}
            type=raw,value=dev-${{ github.sha }},enable=${{ github.event_name != 'push' || github.ref_type != 'tag' }}
          labels: |
            org.opencontainers.image.title=${{ steps.image_name.outputs.platform_image_name }} (${{ matrix.platform }})
            org.opencontainers.image.description=Base image for ${{ steps.parse_tag.outputs.image_base_name }} targeting ${{ matrix.platform }}
            org.opencontainers.image.vendor=Aquia Inc
            org.opencontainers.image.build-url=${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            org.opencontainers.image.architecture=${{ matrix.platform }}

      - name: Build and push Docker image for ${{ matrix.platform }}
        id: docker_build
        uses: docker/build-push-action@v6
        if: github.event_name == 'push' && github.ref_type == 'tag'
        with:
          pull: true
          file: Dockerfile.${{ steps.parse_tag.outputs.image_base_name }}
          push: true
          platforms: ${{ matrix.platform }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ github.repository }}-${{ steps.image_name.outputs.platform_image_name }}
          cache-to: type=gha,mode=max,scope=${{ github.repository }}-${{ steps.image_name.outputs.platform_image_name }}

      - name: Output SHA256 digest for ${{ matrix.platform }}
        if: github.event_name == 'push' && github.ref_type == 'tag'
        run: |
          echo "SHA256 digest for ${{ steps.image_name.outputs.platform_image_name }}: ${{ steps.docker_build.outputs.digest }}"

  create_release:
    runs-on: ubuntu-latest
    needs: publish_image
    if: github.event_name == 'push' && github.ref_type == 'tag' && needs.publish_image.result == 'success'
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract Image Base Name and Version from Tag for Release
        id: parse_tag_release
        run: |
          tag_ref="${{ github.ref }}"
          if [[ $tag_ref =~ refs/tags/release/([^/]+)/v([0-9]+\.[0-9]+\.[0-9]+)$ ]]; then
              image_base_name="${BASH_REMATCH[1]}"
              version="${BASH_REMATCH[2]}"
              echo "Parsed from release tag: image_base_name=$image_base_name, version=$version"
              echo "image_base_name=$image_base_name" >> $GITHUB_OUTPUT
              echo "version=$version" >> $GITHUB_OUTPUT
          else
              echo "Could not parse release tag format from ref: $tag_ref"
              exit 1
          fi
        env:
          TAG: ${{ github.ref }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: "Release ${{ github.ref_name }} / ${{ steps.parse_tag_release.outputs.image_base_name }}"
          body: |
            Platform-specific Docker images for `${{ steps.parse_tag_release.outputs.image_base_name }}` version `${{ steps.parse_tag_release.outputs.version }}` pushed.

            **Published Images & Tags:**

            *   **linux/amd64:**
                *   Image: `${{ env.REGISTRY }}/${{ github.repository }}/${{ steps.parse_tag_release.outputs.image_base_name }}-linux-amd64`
                *   Tag: `${{ steps.parse_tag_release.outputs.version }}`
            *   **linux/arm64:**
                *   Image: `${{ env.REGISTRY }}/${{ github.repository }}/${{ steps.parse_tag_release.outputs.image_base_name }}-linux-arm64`
                *   Tag: `${{ steps.parse_tag_release.outputs.version }}`

            **Pull Examples:**

            *   **AMD64 / x86_64:**
                ```bash
                docker pull ${{ env.REGISTRY }}/${{ github.repository }}/${{ steps.parse_tag_release.outputs.image_base_name }}-linux-amd64:${{ steps.parse_tag_release.outputs.version }}
                ```
            *   **ARM64 / aarch64:**
                ```bash
                docker pull ${{ env.REGISTRY }}/${{ github.repository }}/${{ steps.parse_tag_release.outputs.image_base_name }}-linux-arm64:${{ steps.parse_tag_release.outputs.version }}
                ```
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
