name: Publish Base Docker images

on:
  push:
    tags:
      - "release/**"
    branches:
      - main
  pull_request:
    branches: [ main ]
env:
  REGISTRY: ghcr.io
  TAG: ${{ (github.event_name == 'pull_request' && 'release/python-base/v0.0.0') || github.ref }}

jobs:
  publish_image:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform: [linux/amd64, linux/arm64]
    permissions:
      contents: write
      packages: write
      security-events: write
      actions: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Trivy - configure cache
        id: cache-trivy-db
        uses: actions/cache@v4
        with:
          path: ~/.cache/trivy
          key: ${{ runner.os }}-trivy-db-${{ matrix.platform }}
          restore-keys: |
            ${{ runner.os }}-trivy-db-${{ matrix.platform }}
            ${{ runner.os }}-trivy-db-

      - name: Sanitize platform name for tag/name suffix
        id: sanitize_platform
        run: echo "suffix=$(echo ${{ matrix.platform }} | tr '/' '-')" >> $GITHUB_OUTPUT

      - name: Extract Image Base Name and Version from Tag
        id: parse_tag
        run: |
          match=$(echo ${{ env.TAG }} | grep -oP 'release/([^/]+)/v(\d+\.\d+\.\d+)$' | sed 's/release\///')
          echo "match=$match"
          if [[ $match =~ ^([^/]+)/v(.+)$ ]]; then
              echo "Match found (Release Tag)"
              image_base_name="${BASH_REMATCH[1]}"
              version="${BASH_REMATCH[2]}"
              echo "image_base_name=$image_base_name" >> $GITHUB_OUTPUT
              echo "version=$version" >> $GITHUB_OUTPUT
              echo "image_base_name=$image_base_name"
              echo "version=$version"
          else
              # Not a release tag - likely main branch push or PR default
              echo "Not a release tag build (TAG='${{ env.TAG }}'). Setting default values for test build."
              # Use 'python-base' as default, similar to PR logic, so test build can find Dockerfile
              default_image="python-base"
              default_version="dev"
              echo "image_base_name=$default_image" >> $GITHUB_OUTPUT
              echo "version=$default_version" >> $GITHUB_OUTPUT
              echo "image_base_name=$default_image"
              echo "version=$default_version"
              # IMPORTANT: Do not exit 1 here. Allow the workflow to continue for non-release builds.
          fi

      - name: Construct Platform-Specific Image Name
        id: image_name
        run: |
          echo "platform_image_name=${{ steps.parse_tag.outputs.image_base_name }}-${{ steps.sanitize_platform.outputs.suffix }}" >> $GITHUB_OUTPUT
          echo "Platform Image Name: ${{ steps.parse_tag.outputs.image_base_name }}-${{ steps.sanitize_platform.outputs.suffix }}"

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.4.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker Image for ${{ matrix.platform }} (Test)
        id: build_test
        uses: docker/build-push-action@v6
        with:
          pull: true
          file: Dockerfile.${{ steps.parse_tag.outputs.image_base_name }}
          platforms: ${{ matrix.platform }}
          load: true
          tags: ${{ github.repository }}/${{ steps.image_name.outputs.platform_image_name }}:test
          cache-from: type=gha,scope=${{ github.repository }}-${{ steps.image_name.outputs.platform_image_name }}
          cache-to: type=gha,mode=max,scope=${{ github.repository }}-${{ steps.image_name.outputs.platform_image_name }}

      - name: Run Trivy vulnerability scanner for ${{ matrix.platform }}
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: image
          image-ref: ${{ github.repository }}/${{ steps.image_name.outputs.platform_image_name }}:test
          format: "sarif"
          output: "trivy-results-${{ steps.sanitize_platform.outputs.suffix }}.sarif"
          exit-code: "1"
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "CRITICAL,HIGH,MEDIUM"

      - name: Get installed package versions for ${{ matrix.platform }}
        id: get_versions
        run: |
            image_base_name="${{ steps.parse_tag.outputs.image_base_name }}"
            platform_image_name="${{ steps.image_name.outputs.platform_image_name }}"
            test_tag="${{ github.repository }}/${platform_image_name}:test"
            output_file=".env.versions.${{ steps.sanitize_platform.outputs.suffix }}"
            echo "Output file: $output_file"
            echo "Test tag: $test_tag"
            extraction_status="false" # Default to false
  
            # Check if the image is one that should have a versions file
            if [[ "$image_base_name" == "python-base" || "$image_base_name" == "nodejs-base" || "$image_base_name" == "openjdk17-base" ]]; then
                echo "Attempting to extract versions from $test_tag for $platform_image_name"
                # Attempt extraction. Use 'sh -c' to better control exit code based on 'cat' success.
                if docker run --rm --platform ${{ matrix.platform }} "$test_tag" sh -c 'cat /tmp/versions.txt && exit 0 || exit 1' > "$output_file"; then
                    # Check if the created file actually has content
                    if [ -s "$output_file" ]; then
                        echo "Versions extracted successfully to $output_file"
                        extraction_status="true"
                    else
                        echo "Warning: Command succeeded but extracted versions file '$output_file' is empty. Treating as failure."
                        # Keep extraction_status="false"
                        # Optionally remove the empty file: rm "$output_file"
                    fi
                else
                    echo "Warning: Failed to execute 'cat /tmp/versions.txt' in container $test_tag. Exit code: $?"
                    # Ensure the potentially partially created/empty file is removed on error
                    rm -f "$output_file"
                    # Keep extraction_status="false"
                fi
            else
                echo "No version extraction needed for $platform_image_name."
                # Keep extraction_status="false"
            fi
  
            # Set outputs
            echo "extraction_success=$extraction_status" >> $GITHUB_OUTPUT
            # Set path only if extraction was truly successful and file should exist
            if [[ "$extraction_status" == "true" ]]; then
              echo "output_file_path=$output_file" >> $GITHUB_OUTPUT
            else
              echo "output_file_path=" >> $GITHUB_OUTPUT
            fi
  

      - name: Upload versions artifact (from amd64)
        uses: actions/upload-artifact@v4
        if: matrix.platform == 'linux/amd64' && steps.get_versions.outputs.extraction_success == 'true'
        with:
          name: versions-file-amd64
          path: ${{ steps.get_versions.outputs.output_file_path }}
          retention-days: 1

      - name: Check if .env.versions file exists (Local check before dotenv)
        id: check_env_file
        run: |
          if [ -f ".env.versions.${{ steps.sanitize_platform.outputs.suffix }}" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
      - name: Rename versions file to .env (Local Env)
        if: steps.check_env_file.outputs.exists == 'true'
        run: mv .env.versions.${{ steps.sanitize_platform.outputs.suffix }} .env

      - name: Read package versions for ${{ matrix.platform }} (Local Env)
        if: steps.check_env_file.outputs.exists == 'true'
        id: dotenv_local
        uses: xom9ikk/dotenv@v2.3.0
        with:
          path: .

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5.7.0
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ steps.image_name.outputs.platform_image_name }}
          tags: |
            type=semver,pattern={{version}},value=${{ steps.parse_tag.outputs.version }},enable=${{ github.event_name == 'push' && github.ref_type == 'tag' }}
            type=raw,value=dev-${{ github.sha }},enable=${{ github.event_name != 'push' || github.ref_type != 'tag' }}
          labels: |
            org.opencontainers.image.title=${{ steps.image_name.outputs.platform_image_name }} (${{ matrix.platform }})
            org.opencontainers.image.description=Base image for ${{ steps.parse_tag.outputs.image_base_name }} targeting ${{ matrix.platform }}
            org.opencontainers.image.vendor=Aquia Inc
            org.opencontainers.image.build-url=${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            org.opencontainers.image.architecture=${{ matrix.platform }}

      - name: Build and push Docker image for ${{ matrix.platform }}
        id: docker_build
        uses: docker/build-push-action@v6
        if: github.event_name == 'push' && github.ref_type == 'tag'
        with:
          pull: true
          file: Dockerfile.${{ steps.parse_tag.outputs.image_base_name }}
          push: true
          platforms: ${{ matrix.platform }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ github.repository }}-${{ steps.image_name.outputs.platform_image_name }}
          cache-to: type=gha,mode=max,scope=${{ github.repository }}-${{ steps.image_name.outputs.platform_image_name }}

      - name: Output SHA256 digest for ${{ matrix.platform }}
        if: github.event_name == 'push' && github.ref_type == 'tag'
        run: |
          echo "SHA256 digest for ${{ steps.image_name.outputs.platform_image_name }}: ${{ steps.docker_build.outputs.digest }}"

  create_release:
    runs-on: ubuntu-latest
    needs: publish_image
    if: github.event_name == 'push' && github.ref_type == 'tag' && needs.publish_image.result == 'success'
    permissions:
      contents: write
      actions: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract Image Base Name and Version from Tag for Release
        id: parse_tag_release
        run: |
          tag_ref="${{ github.ref }}"
          if [[ $tag_ref =~ refs/tags/release/([^/]+)/v([0-9]+\.[0-9]+\.[0-9]+)$ ]]; then
              image_base_name="${BASH_REMATCH[1]}"
              version="${BASH_REMATCH[2]}"
              echo "Parsed from release tag: image_base_name=$image_base_name, version=$version"
              echo "image_base_name=$image_base_name" >> $GITHUB_OUTPUT
              echo "version=$version" >> $GITHUB_OUTPUT
          else
              echo "Could not parse release tag format from ref: $tag_ref"
              exit 1
          fi
        env:
          TAG: ${{ github.ref }}

      - name: Download versions artifact
        id: download_artifact
        # Run if the image base name is one that has versions
        if: |
          steps.parse_tag_release.outputs.image_base_name == 'python-base' ||
          steps.parse_tag_release.outputs.image_base_name == 'nodejs-base' ||
          steps.parse_tag_release.outputs.image_base_name == 'openjdk17-base'
        uses: actions/download-artifact@v4
        with:
          name: versions-file-amd64
          path: .

      - name: Rename downloaded artifact to .env
        if: steps.download_artifact.outcome == 'success'
        run: mv .env.versions.linux-amd64 .env
  

      - name: Read downloaded package versions
        id: dotenv_release
        if: steps.download_artifact.outcome == 'success'
        uses: xom9ikk/dotenv@v2.3.0
        with:
          path: .

      - name: Create GitHub Release Body
        id: release_body
        run: |
          image_base_name="${{ steps.parse_tag_release.outputs.image_base_name }}"
          version_tag="${{ steps.parse_tag_release.outputs.version }}"
          repo_name="${{ github.repository }}"
          registry="${{ env.REGISTRY }}"

          # Start with the base body
          body=$(cat <<EOF
          Platform-specific Docker images for \`$image_base_name\` version \`$version_tag\` pushed.

          **Published Images & Tags:**

          *   **linux/amd64:**
              *   Image: \`$registry/$repo_name/$image_base_name-linux-amd64\`
              *   Tag: \`$version_tag\`
          *   **linux/arm64:**
              *   Image: \`$registry/$repo_name/$image_base_name-linux-arm64\`
              *   Tag: \`$version_tag\`
          EOF
          )

          # Conditionally add specific version tags if dotenv step succeeded
          if [[ "${{ steps.dotenv_release.outcome }}" == "success" ]]; then
            specific_tags_section=""
            if [[ "$image_base_name" == "python-base" ]]; then
              py_major="${{ env.python_major_tag }}"
              py_minor="${{ env.python_minor_tag }}"
              specific_tags_section=$(cat <<EOF

          **Python Version Tags:**
          *   Major: \`${py_major}\`
          *   Minor: \`${py_minor}\`
          EOF
              )
            elif [[ "$image_base_name" == "nodejs-base" ]]; then
              node_major="${{ env.nodejs_major_tag }}"
              node_minor="${{ env.nodejs_minor_tag }}"
              specific_tags_section=$(cat <<EOF

          **Node.js Version Tags:**
          *   Major: \`${node_major}\`
          *   Minor: \`${node_minor}\`
          EOF
              )
            elif [[ "$image_base_name" == "openjdk17-base" ]]; then
              # Assuming openjdk_major_tag and openjdk_minor_tag exist in the versions file
              jdk_major="${{ env.openjdk_major_tag }}"
              jdk_minor="${{ env.openjdk_minor_tag }}"
              specific_tags_section=$(cat <<EOF

          **OpenJDK Version Tags:**
          *   Major: \`${jdk_major}\`
          *   Minor: \`${jdk_minor}\`
          EOF
              )
            fi
            body="${body}${specific_tags_section}"
          fi

          # Add pull examples
          pull_examples=$(cat <<EOF

          **Pull Examples:**

          *   **AMD64 / x86_64:**
              \`\`\`bash
              docker pull $registry/$repo_name/$image_base_name-linux-amd64:$version_tag
              \`\`\`
          *   **ARM64 / aarch64:**
              \`\`\`bash
              docker pull $registry/$repo_name/$image_base_name-linux-arm64:$version_tag
              \`\`\`
          EOF
          )
          body="${body}${pull_examples}"

          # Escape special characters for JSON and set output
          body=$(echo "$body" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | sed ':a;N;$!ba;s/\n/\\n/g')
          echo "body=$body" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: "Release ${{ github.ref_name }} / ${{ steps.parse_tag_release.outputs.image_base_name }}"
          body: ${{ steps.release_body.outputs.body }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
