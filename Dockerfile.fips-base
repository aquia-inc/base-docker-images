### OPENSSL WITH FIPS BUILD ###
# Using Wolfi-Alpine base image instead of Wolfi because it has better tooling for building OpenSSL
FROM ghcr.io/wolfi-dev/alpine-base:latest@sha256:a4c00b697e154b92e6d99d7f60405641b9d46adce4cb1e3c2e54af69f74f95d3

# Install openssl dependencies
RUN apk update && apk add --no-cache \
# build-base \
linux-headers \
pcre-dev \
wget \
ca-certificates \
perl \
libssl3 \
make \
gcc \
libgcc \
zlib-dev \
g++

# Set up the build environment
WORKDIR /usr/src
# Latest NIST-approved FIPS-enabled OpenSSL version 3.0.9 as of the time of coding this Dockerfile
# https://csrc.nist.gov/projects/cryptographic-module-validation-program/certificate/4282
# Download and build OpenSSL 3.0.9 from source
WORKDIR /usr/src
ENV OPENSSL_MODULES="/usr/local/ssl/lib64/ossl-modules"
RUN wget -q https://www.openssl.org/source/openssl-3.0.9.tar.gz && tar -zxvf openssl-3.0.9.tar.gz > /dev/null

RUN cd openssl-3.0.9 && \
    ./Configure enable-fips --prefix=/usr/local/ssl --openssldir=/usr/local/ssl no-ssl3 no-legacy no-comp no-idea no-dtls no-dtls1 no-err no-psk no-srp no-ec2m no-weak-ssl-ciphers -DOPENSSL_USE_BUILD_DATE && \
    make -j$(nproc) && \
    make -j$(nproc) install_sw && \
    make -j$(nproc) install_ssldirs && \
    make -j$(nproc) install_fips

# Ensure that the FIPS module is correctly installed by trying both lib and lib64 paths
RUN /usr/local/ssl/bin/openssl fipsinstall -out /usr/local/ssl/fipsmodule.cnf -module /usr/local/ssl/lib/ossl-modules/fips.so || \
    (echo "Trying lib64 path for fipsinstall..." && /usr/local/ssl/bin/openssl fipsinstall -out /usr/local/ssl/fipsmodule.cnf -module /usr/local/ssl/lib64/ossl-modules/fips.so)

 
# Enable FIPS mode in OpenSSL configuration
RUN echo "openssl_conf = openssl_init" > /usr/local/ssl/openssl.cnf && \
  echo "[openssl_init]" >> /usr/local/ssl/openssl.cnf && \
  echo "config = fips_sect" >> /usr/local/ssl/openssl.cnf && \
  echo "[fips_sect]" >> /usr/local/ssl/openssl.cnf && \
  echo "fips = fips_mode" >> /usr/local/ssl/openssl.cnf && \
  echo "[fips_mode]" >> /usr/local/ssl/openssl.cnf && \
  echo "activate = 1" >> /usr/local/ssl/openssl.cnf

# Mop up
WORKDIR /usr/src
RUN rm -rf ./openssl*
ENV PATH="/usr/local/ssl/bin:$PATH"
USER nobody

### END OPENSSLL WITH FIPS BUILD ###

# Copy and uncomment the variables below to your build stages,
# where you need to link/compile against FIPS-enabled OpenSSL libraries
# ENV OPENSSL_CONF=/usr/local/ssl/openssl.cnf
# ENV LDFLAGS="-L/usr/local/lib -L/usr/lib"
# ENV CPPFLAGS="-I/usr/local/ssl/include/openssl"
# ENV PATH="/usr/local/ssl/bin:$PATH"

# If building other software (like Nginx, Python, etc.), you might need
# variations of these ENV vars depending on that software's build system.
 # ENV CPPFLAGS="-I/usr/local/ssl/include/openssl"
 # ENV PKG_CONFIG_PATH="/usr/local/lib/pkgconfig"
 # ENV LD_LIBRARY_PATH="/usr/lib:/lib:/usr/local/lib;/usr/local/lib/engines-3"

### EXAMPLE STAGE 2: Build an application using the FIPS OpenSSL ###
# # Use a standard base image for the final application
# FROM ghcr.io/wolfi-dev/alpine-base:latest@sha256:2d96f988c92c74fd0697748787edaa1e4a6b931b1eec28dd746ecd1b79c59e82 AS final-app
# LABEL stage="final-app"
# # Install runtime dependencies and build tools for the example app
# RUN apk update && apk add --no-cache \
#     gcc \
#     libc-dev \
#     # Add any other runtime dependencies for your actual application here
#     ca-certificates # Often needed for network communication

# # Copy the FIPS-enabled OpenSSL installation from the builder stage
# COPY --from=fips-builder /usr/local/ssl /usr/local/ssl/

# # Set environment variables needed to link against the custom OpenSSL
# # These tell the compiler/linker where to find the FIPS OpenSSL headers and libraries.
# ENV OPENSSL_CONF=/usr/local/ssl/openssl.cnf
# ENV LDFLAGS="-L/usr/local/ssl/lib64 -Wl,-rpath,/usr/local/ssl/lib64"
# ENV CPPFLAGS="-I/usr/local/ssl/include"
# # PKG_CONFIG_PATH might be needed for some build systems
# # ENV PKG_CONFIG_PATH="/usr/local/ssl/lib64/pkgconfig"
# ENV LD_LIBRARY_PATH="/usr/local/ssl/lib64"
# ENV PATH="/usr/local/ssl/bin:$PATH"

# # Example: Create and compile a simple C program that checks FIPS mode
# WORKDIR /app
# RUN echo '#include <stdio.h>\n\
# #include <openssl/evp.h>\n\
# int main() {\n\
#     if (EVP_default_properties_is_fips_enabled(NULL)) {\n\
#         printf("FIPS mode is enabled.\\n");\n\
#     } else {\n\
#         printf("FIPS mode is NOT enabled.\\n");\n\
#     }\n\
#     printf("OpenSSL library version: %s\\n", OpenSSL_version(OPENSSL_VERSION_STRING));\n\
#     return 0;\n\
# }' > fips_check.c

# # Compile the program, linking against the FIPS OpenSSL
# # The LDFLAGS and CPPFLAGS environment variables are used by gcc here
# RUN gcc fips_check.c -o fips_check -lssl -lcrypto $LDFLAGS $CPPFLAGS

# # Set the default user for the final image
# USER nobody

# # Set the default command to run the example program
# CMD ["/app/fips_check"]